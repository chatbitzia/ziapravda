import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import CommandStart, Command
from flask import Flask
from threading import Thread

API_TOKEN = '8077961165:AAGOcmrcXYXswfosdH8LMbwf5TLUqmHrIpM'
GROUP_ID = -1002801579739

CATEGORIES = [
    "–†–∞–±–æ—Ç–∞ —Å–ª—É–∂–±", "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", "–£—Å–ª–æ–≤–∏—è —Ç—Ä—É–¥–∞", "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –æ—Ö—Ä–∞–Ω–∞",
    "–î—Ä—É–≥–æ–µ"
]

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


class FeedbackForm(StatesGroup):
    choosing_category = State()
    typing_feedback = State()


@dp.message(CommandStart())
async def start_handler(message: types.Message, state: FSMContext):
    keyboard_buttons = [[KeyboardButton(text=cat)] for cat in CATEGORIES]
    markup = ReplyKeyboardMarkup(keyboard=keyboard_buttons,
                                 resize_keyboard=True)
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π Telegram-–±–æ—Ç –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤:",
        reply_markup=markup)
    await state.set_state(FeedbackForm.choosing_category)


@dp.message(FeedbackForm.choosing_category)
async def category_chosen(message: types.Message, state: FSMContext):
    category = message.text
    if category not in CATEGORIES:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(category=category)
    await message.answer("‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à –∞–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–∑—ã–≤ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:",
                         reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(FeedbackForm.typing_feedback)


@dp.message(FeedbackForm.typing_feedback,
            lambda message: message.text and not message.photo)
async def feedback_text_received(message: types.Message, state: FSMContext):
    feedback = message.text
    data = await state.get_data()
    category = data['category']
    full_message = f"üì® –ù–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–∑—ã–≤:\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–û—Ç–∑—ã–≤: {feedback}"
    await bot.send_message(GROUP_ID, full_message)
    back_markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥")]],
                                      resize_keyboard=True)
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –ø–µ—Ä–µ–¥–∞–Ω —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É.",
                         reply_markup=back_markup)
    await state.clear()


@dp.message(FeedbackForm.typing_feedback, lambda message: message.photo)
async def feedback_photo_received(message: types.Message, state: FSMContext):
    data = await state.get_data()
    category = data['category']
    caption = f"üì® –ù–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–∑—ã–≤:\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"
    if message.caption:
        caption += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.caption}"
    await bot.send_photo(GROUP_ID, message.photo[-1].file_id, caption=caption)
    back_markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥")]],
                                      resize_keyboard=True)
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ —Å —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É.",
                         reply_markup=back_markup)
    await state.clear()


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = ("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                 "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                 "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
    await message.reply(help_text)


@dp.message(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def go_back_to_category(message: types.Message, state: FSMContext):
    keyboard_buttons = [[KeyboardButton(text=cat)] for cat in CATEGORIES]
    markup = ReplyKeyboardMarkup(keyboard=keyboard_buttons,
                                 resize_keyboard=True)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ—Ç–∑—ã–≤–∞:",
                         reply_markup=markup)
    await state.set_state(FeedbackForm.choosing_category)


@dp.message()
async def echo(message: types.Message):
    await message.reply(
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, skip_updates=True, handle_signals=False)


# --- üåê Flask-—Å–µ—Ä–≤–µ—Ä ---
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω."

@app.route('/ping')
def ping():
    return "üèì Pong!"


def run_flask():
    app.run(host='0.0.0.0', port=8080)


def start_aiogram():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.create_task(main())
    loop.run_forever()


if __name__ == '__main__':
    Thread(target=start_aiogram).start()
    run_flask()
