import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

# ========== CONFIG ==========
API_TOKEN = '8077961165:AAGOcmrcXYXswfosdH8LMbwf5TLUqmHrIpM'
GROUP_ID = -1002801579739
CATEGORIES = [
    "–†–∞–±–æ—Ç–∞ —Å–ª—É–∂–±",
    "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ",
    "–£—Å–ª–æ–≤–∏—è —Ç—Ä—É–¥–∞",
    "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –æ—Ö—Ä–∞–Ω–∞",
    "–î—Ä—É–≥–æ–µ"
]
ADMIN_IDS = [-1002801579739]  # –î–æ–±–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π Telegram ID –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /–æ—Ç–≤–µ—Ç

# ========== –ë–ê–ó–ê (–ø—Ä–æ—Å—Ç–∞—è –Ω–∞ –ø–∞–º—è—Ç—å) ==========
feedback_counter = 100
feedback_map = {}  # {–æ—Ç–∑—ã–≤_id: user_id}

# ========== BOT INIT ==========
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ========== FSM ==========
class FeedbackForm(StatesGroup):
    choosing_category = State()
    typing_feedback = State()
    waiting_reply_option = State()

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
category_markup = ReplyKeyboardMarkup(resize_keyboard=True)
for cat in CATEGORIES:
    category_markup.add(KeyboardButton(cat))

back_markup = ReplyKeyboardMarkup(resize_keyboard=True)
back_markup.add(KeyboardButton("–ù–∞–∑–∞–¥"))

reply_option_markup = ReplyKeyboardMarkup(resize_keyboard=True)
reply_option_markup.add(KeyboardButton("‚úÖ –•–æ—á—É –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"))
reply_option_markup.add(KeyboardButton("‚ùå –ë–µ–∑ –æ—Ç–≤–µ—Ç–∞"))

# ========== –•–ï–ù–î–õ–ï–†–´ ==========
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π Telegram-–±–æ—Ç –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞!\n\n"
        "–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=category_markup
    )
    await FeedbackForm.choosing_category.set()

@dp.message_handler(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def go_back_to_category(message: types.Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞:",
        reply_markup=category_markup
    )
    await FeedbackForm.choosing_category.set()

@dp.message_handler(state=FeedbackForm.choosing_category)
async def category_chosen(message: types.Message, state: FSMContext):
    category = message.text
    if category not in CATEGORIES:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(category=category)
    await message.answer("‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à –∞–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ:")
    await FeedbackForm.typing_feedback.set()

@dp.message_handler(content_types=['text', 'photo'], state=FeedbackForm.typing_feedback)
async def feedback_received(message: types.Message, state: FSMContext):
    global feedback_counter
    data = await state.get_data()
    category = data['category']

    feedback_id = feedback_counter
    feedback_counter += 1

    caption = f"üì® –ù–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–∑—ã–≤ #{feedback_id}:\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"

    if message.content_type == 'photo':
        if message.caption:
            caption += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.caption}"
        await bot.send_photo(GROUP_ID, message.photo[-1].file_id, caption=caption)
    else:
        caption += f"\n–û—Ç–∑—ã–≤: {message.text}"
        await bot.send_message(GROUP_ID, caption)

    await state.update_data(feedback_id=feedback_id)
    await message.answer("–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏?", reply_markup=reply_option_markup)
    await FeedbackForm.waiting_reply_option.set()

@dp.message_handler(state=FeedbackForm.waiting_reply_option)
async def reply_option(message: types.Message, state: FSMContext):
    data = await state.get_data()
    feedback_id = data['feedback_id']

    if message.text.startswith("‚úÖ"):
        feedback_map[feedback_id] = message.from_user.id
        await bot.send_message(GROUP_ID, f"üìå –û—Ç–∑—ã–≤ #{feedback_id}: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ: /–æ—Ç–≤–µ—Ç {feedback_id} <—Ç–µ–∫—Å—Ç>")
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –í–∞–º –æ—Ç–≤–µ—Ç, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.", reply_markup=back_markup)
    else:
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –ø–µ—Ä–µ–¥–∞–Ω —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É.", reply_markup=back_markup)

    await state.finish()

@dp.message_handler(commands=['–æ—Ç–≤–µ—Ç'])
async def send_admin_reply(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚õî –£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤.")
        return

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /–æ—Ç–≤–µ—Ç <–Ω–æ–º–µ—Ä> <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>")
        return

    feedback_id = int(args[1])
    reply_text = args[2]

    user_id = feedback_map.get(feedback_id)
    if user_id:
        try:
            await bot.send_message(user_id, f"üì© –û—Ç–≤–µ—Ç –Ω–∞ –í–∞—à –æ—Ç–∑—ã–≤ #{feedback_id}:\n{reply_text}")
            await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except:
            await message.reply("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
    else:
        await message.reply("‚ùå –û—Ç–∑—ã–≤ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–≤–µ—Ç.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
